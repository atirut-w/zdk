#include "codegen.hpp"
#include "CParser.h"
#include <any>

using namespace std;
using namespace antlr4;

std::any Codegen::visitTranslationUnit(CParser::TranslationUnitContext *ctx) {
  os << "\t; Generated by ZDK C Compiler from " << ctx->start->getInputStream()->getSourceName() << "\n\n";

  return visitChildren(ctx);
}

std::any Codegen::visitFunctionDefinition(CParser::FunctionDefinitionContext *ctx) {
  string name = ctx->declarator()->functionDeclarator()->Identifier()->getText();
  os << "\t.global " << name << "\n";
  os << "\t.type " << name << ", @function\n";
  os << name << ":\n";

  visitChildren(ctx);
  os << "\n";
  return {};
}

std::any Codegen::visitReturnStatement(CParser::ReturnStatementContext *ctx) {
  if (ctx->expression()) {
    visit(ctx->expression());
  }
  os << "\tret\n";

  return {};
}

std::any Codegen::visitExpression(CParser::ExpressionContext *ctx) {
  if (ctx->IntegerConstant()) {
    os << "\tld hl, " << ctx->IntegerConstant()->getText() << "\n";
  }

  return {};
}
