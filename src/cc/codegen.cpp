#include "codegen.hpp"
#include "CParser.h"
#include <any>

using namespace std;
using namespace antlr4;

std::any Codegen::visitTranslationUnit(CParser::TranslationUnitContext *ctx) {
  os << "\t; Generated by ZDK C Compiler from " << ctx->start->getInputStream()->getSourceName() << "\n\n";

  return visitChildren(ctx);
}

std::any Codegen::visitFunctionDefinition(CParser::FunctionDefinitionContext *ctx) {
  string name = dynamic_cast<CParser::FunctionDeclaratorContext *>(ctx->declarator())->Identifier()->getText();
  os << "\t.global " << name << "\n";
  os << "\t.type " << name << ", @function\n";
  os << name << ":\n";

  visitChildren(ctx);
  os << "\n";
  return {};
}

std::any Codegen::visitReturnStatement(CParser::ReturnStatementContext *ctx) {
  if (ctx->expression()) {
    visit(ctx->expression());
  }
  os << "\tret\n";

  return {};
}

std::any Codegen::visitIntegerConstantExpression(
    CParser::IntegerConstantExpressionContext *ctx) {
  os << "\tld hl, " << ctx->IntegerConstant()->getText() << "\n";
  return {};
}

std::any
Codegen::visitNegationExpression(CParser::NegationExpressionContext *ctx) {
  visit(ctx->expression());
  os << "\txor a\n";
  os << "\tsub l\n";
  os << "\tld l, a\n";
  os << "\tsbc a, a\n";
  os << "\tsub h\n";
  os << "\tld h, a\n";

  return {};
}

std::any
Codegen::visitBitwiseNotExpression(CParser::BitwiseNotExpressionContext *ctx) {
  visit(ctx->expression());
  os << "\tld a, h\n";
  os << "\tcpl\n";
  os << "\tld h, a\n";
  os << "\tld a, l\n";
  os << "\tcpl\n";
  os << "\tld l, a\n";

  return {};
}

std::any Codegen::visitMultiplicativeExpression(
    CParser::MultiplicativeExpressionContext *ctx) {
  visit(ctx->expression(1));
  os << "\tpush hl\n";
  os << "\tpop de\n";
  visit(ctx->expression(0));

  if (ctx->Star()) {
    os << "\tcall __mulsi3\n";
  } else if (ctx->Slash()) {
    os << "\tcall __divsi3\n";
  } else if (ctx->Percent()) {
    os << "\tcall __modsi3\n";
  }

  return {};
}

std::any
Codegen::visitAdditiveExpression(CParser::AdditiveExpressionContext *ctx) {
  visit(ctx->expression(1));
  os << "\tpush hl\n";
  os << "\tpop de\n";

  if (ctx->Plus()) {
    visit(ctx->expression(0));
    os << "\tadd hl, de\n";
  } else if (ctx->Minus()) {
    visit(ctx->expression(0));
    os << "\txor a\n";
    os << "\tsbc hl, de\n";
  }

  return {};
}
