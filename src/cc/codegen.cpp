#include <codegen.hpp>
#include <iostream>
#include <stdexcept>
#include <string>

using namespace std;
using namespace antlr4;

CodeGen::CodeGen(ProgramMeta &program_meta, std::ostream &output) : program_meta(program_meta), output(output)
{
    output << "\t; Generated by ZDK C Compiler\n\n";
}

any CodeGen::visitFunctionDefinition(CParser::FunctionDefinitionContext *ctx)
{
    string name = ctx->declarator()->directDeclarator()->directDeclarator()->Identifier()->getText();

    output << "\t.global " << name << "\n";
    output << "\t.type " << name << ", @function\n";
    output << name << ":\n";

    // TODO: Function prologue
    // TODO: Function body
    // TODO: Function epilogue
    output << "\tret\n";

    return any();
}

any CodeGen::visitPrimaryExpression(CParser::PrimaryExpressionContext *ctx)
{
    if (auto const_ctx = ctx->Constant())
    {
        // Thanks to the fact that the child rules are fragments, we have to do our own parsing.
    }
    else
    {
        throw runtime_error("unsupported expression type");
    }

    return any();
}
