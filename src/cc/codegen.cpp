#include <codegen.hpp>
#include <variant>

using namespace std;
using namespace ZIR;

Codegen::Codegen(std::ostream &out, const Module &module) : out(out), module(module)
{
}

void Codegen::load(const Operand &operand)
{
    if (holds_alternative<int>(operand.value))
    {
        out << "\tld hl, " << get<int>(operand.value) << "\n";
    }
    else
    {
        throw runtime_error("not implemented");
    }
}

void Codegen::generate()
{
    out << "\t; Generated by ZDK C Compiler\n\n";
    
    for (const auto &symbol : module.symbols)
    {
        if (auto function = dynamic_cast<const Module::Function *>(symbol.get()))
        {
            generate_function(*function);
        }
    }
}

void Codegen::generate_function(const Module::Function &function)
{
    out << "\t.global " << function.name << "\n";
    out << "\t.type " << function.name << ", @function\n";
    out << function.name << ":\n";

    for (const auto &instruction : function.instructions)
    {
        generate_instruction(instruction);
    }
}

void Codegen::generate_instruction(const Instruction &instruction)
{
    switch (instruction.operation)
    {
    default:
        throw runtime_error("not implemented");
    case Instruction::RETURN:
        load(instruction.operands[0]);
        out << "\tret\n";
        break;
    }
}
