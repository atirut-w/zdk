#include "types.hpp"
#include <cctype>
#include <codegen.hpp>
#include <iostream>
#include <string>

using namespace std;
using namespace antlr4;

const vector<PrimitiveLayout> primitive_layouts = {
    {
        {},
        {}
    },
    {
            
        {'a'},
        {}
    },
    {
        {'l', 'h'},
        {"hl"}
    },
    {
        {'l', 'h'},
        {"hl"}
    }
};

CodeGen::CodeGen(Module &module, std::ostream &output) : module(module), os(output)
{
    output << "\t; Generated by ZDK C Compiler\n\n\n";
}

void CodeGen::teardown_frame()
{
    // TODO: clause for arguments
    if (!current_function->locals.empty() || false)
    {
        os << "\tld sp, ix\n";
        os << "\tpop ix\n";
        if (!current_function->locals.empty())
        {
            os << "\tpop iy\n";
        }
    }
}

any CodeGen::visitFunctionDefinition(CParser::FunctionDefinitionContext *ctx)
{
    string name = ctx->declarator()->directDeclarator()->directDeclarator()->Identifier()->getText();
    current_function = &module.functions[name];

    int locals_alloc = 0;
    local_offsets.clear();
    for (auto &local : current_function->locals)
    {
        if (locals_alloc > 255)
        {
            throw runtime_error("too many locals");
        }
        
        if (auto *primitive = dynamic_cast<PrimitiveType *>(local.second.get()))
        {
            local_offsets[local.first] = locals_alloc;
            locals_alloc += primitive_layouts[primitive->kind].registers.size();
        }
        else
        {
            throw runtime_error("unsupported local type");
        }
    }

    os << "\t.global " << name << "\n";
    os << "\t.type " << name << ", @function\n";
    os << name << ":\n";

    // TODO: clause for arguments
    if (locals_alloc > 0 || false)
    {
        if (locals_alloc > 0)
        {
            os << "\tpush iy\n";
        }
        os << "\tpush ix\n";
        os << "\tld ix, 0\n";
        os << "\tadd ix, sp\n";

        if (locals_alloc > 0)
        {
            os << "\tld iy, " << -locals_alloc << "\n";
            os << "\tadd iy, sp\n";
            os << "\tld sp, iy\n";
        }
    }

    if (auto block_itemlist_ctx = ctx->compoundStatement()->blockItemList())
    {
        for (auto block_item_ctx : block_itemlist_ctx->blockItem())
        {
            visit(block_item_ctx);
        }
    }

    if (!current_function->has_trailing_return)
    {
        teardown_frame();
        os << "\tret\n";
    }

    os << "\n\n";
    return any();
}

any CodeGen::visitJumpStatement(CParser::JumpStatementContext *ctx)
{
    if (ctx->Return())
    {
        if (ctx->expression())
        {
            visit(ctx->expression());
        }
        teardown_frame();
        os << "\tret\n";
    }
    else
    {
        throw runtime_error("unsupported jump statement");
    }

    return any();
}
