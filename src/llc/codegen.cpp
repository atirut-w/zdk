#include <codegen.hpp>
#include <stdexcept>

using namespace std;

Codegen::Codegen(ModuleInfo &module_info, ostream &output) : module_info(module_info), os(output)
{
    os << "\t; Generated by ZDK IR Compiler\n\n";
}

any Codegen::visitFuncDef(LLVMIRParser::FuncDefContext *ctx)
{
    visitFuncHeader(ctx->funcHeader());
    os << current_function->name << ":\n";

    visitFuncBody(ctx->funcBody());

    return any();
}

any Codegen::visitFuncHeader(LLVMIRParser::FuncHeaderContext *ctx)
{
    auto name = ctx->GlobalIdent()->getText().substr(1);

    // TODO: Detect linkage
    os << "\t.global " << name << "\n";
    os << "\t.type " << name << ", @function\n";
    current_function = &module_info.functions[name];

    return any();
}

any Codegen::visitRetTerm(LLVMIRParser::RetTermContext *ctx)
{
    if (auto concrete_type = ctx->concreteType())
    {
        if (auto int_type = concrete_type->intType())
        {
            // TODO: Load return value
        }
        else
        {
            throw runtime_error(concrete_type->getText() + " is not supported yet.");
        }
    }
    os << "\tret\n";
    
    return any();
}
