#include <codegen.hpp>
#include <stdexcept>
#include <vector>

using namespace std;

int least_bytes_required(int bits)
{
    int rem = bits % 8;
    int bytes = bits / 8;
    if (rem > 0)
    {
        bytes++;
    }
    return bytes;
}

Codegen::Codegen(ModuleInfo &module_info, ostream &output) : module_info(module_info), os(output)
{
    os << "\t; Generated by ZDK IR Compiler\n\n";
}

any Codegen::visitFuncDef(LLVMIRParser::FuncDefContext *ctx)
{
    visitFuncHeader(ctx->funcHeader());
    os << current_function->name << ":\n";

    visitFuncBody(ctx->funcBody());

    return any();
}

any Codegen::visitFuncHeader(LLVMIRParser::FuncHeaderContext *ctx)
{
    auto name = ctx->GlobalIdent()->getText().substr(1);

    // TODO: Detect linkage
    os << "\t.global " << name << "\n";
    os << "\t.type " << name << ", @function\n";
    current_function = &module_info.functions[name];

    return any();
}

any Codegen::visitRetTerm(LLVMIRParser::RetTermContext *ctx)
{
    if (auto concrete_type = ctx->concreteType())
    {
        if (auto int_type = concrete_type->intType())
        {
            int bits = stoi(int_type->getText().substr(1));
            int bytes = least_bytes_required(bits);
            if (bytes > 4)
            {
                throw runtime_error("Integers with more than 32 bits are not supported.");
            }

            auto value_ctx = ctx->value();
            if (auto constant = value_ctx->constant())
            {
                int value = stoi(constant->getText());
                if (bytes == 1)
                {
                    os << "\tld a, " << value << "\n";
                }
                else if (bytes == 2)
                {
                    os << "\tld hl, " << value << "\n";
                }
                else if (bytes == 4)
                {
                    os << "\tld hl, " << (value & 0xffff) << "\n";
                    os << "\tld de, " << (value >> 16) << "\n";
                }
            }
            else
            {
                throw runtime_error("Only constant returns are supported.");
            }
        }
        else
        {
            throw runtime_error(concrete_type->getText() + " is not supported yet.");
        }
    }
    os << "\tret\n";
    
    return any();
}
