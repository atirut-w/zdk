{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"ZDK","text":"<p>C compiler and libraries for Z80 development.</p> <p>Warning</p> <p>This documentation is very outdated. Please directly refer to the source codes for the most accurate information.</p> <p>Note</p> <p>This documentation is a work in progress. If anything's missing, feel free to open an issue or a pull request. Be sure to watch out for duplicate issues and pull requests, though!</p>"},{"location":"abi/","title":"Application Binary Interface","text":"<p>The ZDK project specifies an Application Binary Interface (ABI) employed across its compilers, tools, and libraries. This ABI is based on the cdecl calling convention and adheres to conventional C symbol naming rules.</p>"},{"location":"abi/#function-naming","title":"Function Naming","text":"<p>In contrast to traditional 8-bit compilers, ZDK functions do not have an underscore prefix. This approach simplifies the compilation and linking processes, resulting in cleaner and more intuitive function names.</p>"},{"location":"abi/#function-parameters","title":"Function Parameters","text":"<ul> <li>Parameters are pushed onto the stack from right to left.</li> <li>The caller is responsible for cleaning up the stack after the function returns.</li> </ul>"},{"location":"abi/#return-values","title":"Return Values","text":"<ul> <li>Single-byte values are returned in the <code>A</code> register.</li> <li>Multi-byte values are returned with the most significant word in the <code>DE</code> register pair and the least significant word in the <code>HL</code> register pair.</li> </ul>"},{"location":"abi/#register-usage","title":"Register Usage","text":"<ul> <li>Functions can freely use the <code>A</code>, <code>B</code>, <code>C</code>, <code>D</code>, <code>E</code>, <code>H</code>, <code>L</code> registers and their pairs without restrictions.</li> <li>The caller must save and restore any registers it needs to preserve across function calls.</li> <li>If the <code>IX</code> register is used (e.g., for indexing arguments or local variables), the callee must preserve it.</li> </ul>"},{"location":"development/compiler-debugging/","title":"Debugging the Compiler","text":"<p>TODO</p> <p>Flesh out the content</p>"},{"location":"development/compiler-debugging/#breakpoints","title":"Breakpoints","text":"<p>This is usually the first choice you'll want to use when debugging the compiler's internals. It is not the best when debugging issues related to codegen, but it is very useful for checking why that piece of code won't run or (rarely) why the codegen is not producing the desired assembly output.</p>"},{"location":"development/compiler-debugging/#codegen-issues","title":"Codegen Issues","text":"<p>If you are having issues with the compiler's codegen or just need to know how the AST is structured to break the compiler, you can use ANTLR Lab to get a high-level overview of the input code's AST. This is great when you're trying to debug the codegen stage, which is implemented as a visitor pattern in the compiler, much like the analyzer.</p>"}]}