#include "codegen.hpp"
#include <format>

void CodeGen::visit(cparse::TranslationUnit &tu) {
  out << "\t; Generated by zdk-cc\n";
  visit(*tu.function);
}

void CodeGen::visit(cparse::FunctionDefinition &func) {
  out << std::format("\t.global _{}\n", func.name);
  out << std::format("_{}:\n", func.name);
  visit(*func.body);
}

void CodeGen::visit(cparse::Statement &stmt) {
  if (auto ret = dynamic_cast<cparse::ReturnStatement *>(&stmt)) {
    visit(*ret);
  } else {
    throw std::runtime_error("Unknown statement type");
  }
}

void CodeGen::visit(cparse::ReturnStatement &ret) {
  visit(*ret.expression);
  out << "\tret\n";
}

void CodeGen::visit(cparse::Expression &expr, bool rhs) {
  if (auto const_expr = dynamic_cast<cparse::ConstantExpression *>(&expr)) {
    visit(*const_expr);
  } else {
    throw std::runtime_error("Unknown expression type");
  }
}

void CodeGen::visit(cparse::ConstantExpression &const_expr, bool rhs) {
  if (rhs) {
    out << std::format("\tld de, {}\n", const_expr.value);
  } else {
    out << std::format("\tld hl, {}\n", const_expr.value);
  }
}
